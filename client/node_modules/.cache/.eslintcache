[{"C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\index.js":"1","C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\App.js":"2","C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\components\\todo.js":"3","C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\components\\authForm.js":"4","C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\components\\regForm.js":"5"},{"size":252,"mtime":1612714392521,"results":"6","hashOfConfig":"7"},{"size":14278,"mtime":1613666406807,"results":"8","hashOfConfig":"7"},{"size":10172,"mtime":1613670339346,"results":"9","hashOfConfig":"7"},{"size":3059,"mtime":1613670723734,"results":"10","hashOfConfig":"7"},{"size":4681,"mtime":1613666406807,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lvjf55",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\index.js",[],["25","26"],"C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\App.js",["27"],"import React from 'react'\r\nimport ToDo from './components/todo.js'\r\nimport AuthForm from './components/authForm.js'\r\nimport RegisterForm from './components/regForm.js' \r\n//App\r\nexport default class App extends React.Component {\r\n  constructor () {\r\n    super() \r\n    this.state = {\r\n      isLogged: false,\r\n      //AuthForm - стартовая форма\r\n      // formType: 'AuthForm', //отвечает за отображаемую форму\r\n      // formType: 'RegisterForm'\r\n      formType: 'ToDo'\r\n    }\r\n\r\n    this.changeForm = this.changeForm.bind(this)\r\n  }\r\n\r\n  changeForm(type) {\r\n    this.setState({formType: type})\r\n  }\r\n\r\n  selectForm() {\r\n    switch(this.state.formType) {\r\n      case 'AuthForm': return <AuthForm changeForm={this.changeForm}/>\r\n      case 'RegisterForm': return <RegisterForm changeForm={this.changeForm}/>\r\n      //ToDo не имеет право выбора формы, но позднее необходимо будет это реализовать, \r\n      //т.к. пользователь должен иметь возможность смены аккаунта из рабочей области\r\n      case 'ToDo': return <ToDo changeForm={this.changeForm}/> \r\n    }\r\n  }\r\n\r\n  render() {\r\n    // const token = localStorage.getItem('token')\r\n    // if (!token) this.setState('') \r\n    const form = this.selectForm()\r\n\r\n    return <div className='wrapper'>\r\n      {/* <AuthForm /> */}\r\n      {/* <RegisterForm /> */}\r\n      {/* <ToDo /> */}\r\n      {form}\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class AuthForm extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       logValue: '',\r\n//       pasValue: ''\r\n//     }\r\n\r\n//     this.handleLogInput = this.handleLogInput.bind(this)\r\n//     this.handlePasInput = this.handlePasInput.bind(this)\r\n//   }\r\n\r\n//   handleLogInput(evt) {\r\n//     this.setState({logValue: evt.target.value})\r\n//   }\r\n\r\n//   handlePasInput(evt) {\r\n//     this.setState({pasValue: evt.target.value})\r\n//   }\r\n\r\n//   render() {\r\n//     const state = this.state\r\n\r\n//     return (\r\n//       <div className='auth-form'>\r\n//         <div className='auth-form__wrap'>\r\n//           <h1 className='auth-form__title'>Вход</h1>\r\n//           <form className='auth-form__form'>\r\n//             <div className='form__login'>\r\n//               <span>E-mail:</span>\r\n//               <input className='login__input' type='email' value={state.logValue} onChange={this.handleLogInput}/>\r\n//             </div>\r\n//             <div className='form__password'>\r\n//               <span>Пароль:</span>\r\n//               <input className='password__input' type='password' value={state.pasValue} onChange={this.handlePasInput}/>\r\n//             </div>\r\n//           </form>\r\n//           <div className='auth-form__buttons'>\r\n//             <button className='btn-reg'>Зарегистрироваться</button>\r\n//             <button className='btn-enter'>Войти</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// class RegisterForm extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       logValue: '',\r\n//       pasValue: '',\r\n//       repPasValue: ''\r\n//     }\r\n\r\n//     this.handleLogInput = this.handleLogInput.bind(this)\r\n//     this.handlePasInput = this.handlePasInput.bind(this)\r\n//     this.handleRepPasInput = this.handleRepPasInput.bind(this)\r\n//   }\r\n\r\n//   handleLogInput(evt) {\r\n//     this.setState({logValue: evt.target.value})\r\n//   }\r\n\r\n//   handlePasInput(evt) {\r\n//     this.setState({pasValue: evt.target.value})\r\n//   }\r\n\r\n//   handleRepPasInput(evt) {\r\n//     this.setState({repPasValue: evt.target.value})\r\n//   }\r\n\r\n//   render() {\r\n//     const state = this.state\r\n\r\n//     return (\r\n//       <div className='reg-form'>\r\n//         <div className='reg-form__wrap'>\r\n//           <h1 className='reg-form__title'>Регистрация</h1>\r\n//           <form className='reg-form__form'>\r\n//             <div className='form__login'>\r\n//               <span>E-mail:</span>\r\n//               <input className='login__input' type='email' value={state.logValue} onChange={this.handleLogInput}/>\r\n//             </div>\r\n//             <div className='form__password'>\r\n//               <span>Пароль:</span>\r\n//               <input className='password__input' type='password' value={state.pasValue} onChange={this.handlePasInput}/>\r\n//             </div>\r\n//             <div className='form__password repeat-password'>\r\n//               <span>Повторите пароль:</span>\r\n//               <input className='password__input' type='password' value={state.repPasValue} onChange={this.handleRepPasInput}/>\r\n//             </div>\r\n//           </form>\r\n//           <div className='reg-form__buttons'>\r\n//             <button className='btn-enter'>Войти</button>\r\n//             <button className='btn-reg'>Зарегистрироваться</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n//Код написанный ниже импортируется из /components/todo/component.js\r\n////////////////////////////////////////////////////////////////\r\n// //ToDo\r\n// class ToDo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       todos: [\r\n//         {id: '1', text: 'Купить хлеб'},\r\n//         {id: '2', text: 'Купить молоко'},\r\n//         {id: '3', text: 'Купить кофе'}\r\n//       ]\r\n//     }\r\n\r\n//     this.addTodo = this.addTodo.bind(this)\r\n//     this.delTodo = this.delTodo.bind(this)\r\n//     this.saveToDo = this.saveToDo.bind(this)\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     console.log(\"mount\")\r\n//     fetch('http://localhost:5000/api')\r\n//       .then(response => response.json())\r\n//       //.then(result => {this.setState({todos: result} ) })\r\n//       .then(result => {this.setState(state => {\r\n//         for(let item of result) {\r\n//           item.id = item.id.toString()\r\n//         }\r\n//         return {todos: result}\r\n//       } ) })\r\n      \r\n//   }\r\n//   // componentDidUpdate(prevProps, prevState) {\r\n//   //   // if (prevState)\r\n//   //   // console.log(prevState)\r\n//   //   if (prevState.todos.length && (this.state.todos.length < prevState.todos.length)) {\r\n//   //     //console.log(prevState)\r\n\r\n//   //     console.log(\"delete\")\r\n//   //   }\r\n//   // }\r\n\r\n//   createID() { //генератор id для list-item\r\n//     while(true) {\r\n//       const id = Math.floor(Math.random() * 1000) // от 1 до 9999\r\n//       for (let i=0; i<this.state.todos.length; i++) {\r\n//         if (this.state.todos[i].id != id) return id.toString()\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   addTodo(newTodoText) {\r\n//     // this.state.todos.unshift({id: '1', text: newTodoText})\r\n//     // console.log(this.state.todos)\r\n//     // this.setState({todos: this.state.todos})\r\n//     console.log({\"name\": newTodoText})\r\n    \r\n//     fetch('http://localhost:5000/api/', {\r\n//       method: \"post\",\r\n//       headers: {'Content-Type':'application/json'},\r\n//       body: JSON.stringify({\"name\": newTodoText})\r\n//     })\r\n//     .then(res => res.json())\r\n//     .then(result => {\r\n//       this.setState(state => {\r\n//         const cloneTodos = Object.assign([], state.todos) //клонирование массива\r\n//         if (cloneTodos.length != 0) cloneTodos.unshift({id: result[0].id.toString(), text: newTodoText})\r\n//         else cloneTodos.unshift({id: result[0].id.toString(), text: newTodoText})\r\n//         return {todos: cloneTodos}\r\n//       })\r\n//     })\r\n//   }\r\n\r\n//   delTodo(delID) {\r\n//     fetch(`http://localhost:5000/api/delete/${delID}`, {\r\n//       method: \"delete\"\r\n//     })\r\n//     //.then(response => response.json())\r\n//     .then(result => {\r\n//       console.log(result)\r\n//       if (result.status==200) {\r\n//         this.setState( state => {\r\n//         const pos = state.todos.findIndex( value => value.id === delID)\r\n//         const cloneTodos = Object.assign([], state.todos)\r\n//         cloneTodos.splice(pos, 1)\r\n//         return {todos: cloneTodos}\r\n//         })\r\n//       } else console.log(\"error delete\")\r\n//     })\r\n//   }\r\n\r\n//   saveToDo(todo) {\r\n//     console.log(todo)\r\n//     fetch('http://localhost:5000/api/update', {\r\n//       method: \"put\",\r\n//       headers: {'Content-Type':'application/json'},\r\n//       body: JSON.stringify(todo)\r\n//     })\r\n//     //.then(res => res.json())\r\n//     .then(result => {    \r\n//       if (result.status == 200) {\r\n//         let pos\r\n//         for (let i=0; i<this.state.todos.length; i++) {\r\n//           if (this.state.todos[i].id === todo.id) pos = i\r\n//         }\r\n\r\n//         this.setState( state => {\r\n//           const cloneTodos = Object.assign([], state.todos)\r\n//           cloneTodos.splice(pos, 1, {id: todo.id, text: todo.textValue})\r\n//           return {todos: cloneTodos}\r\n//         })\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className='todo'>\r\n//         <AddToDo addTodo={this.addTodo}/>  \r\n//         <ListToDo todos={this.state.todos} delTodo={this.delTodo} saveToDo={this.saveToDo}/>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n// //AddToDo\r\n// class AddToDo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       addText: ''\r\n//     }\r\n\r\n//     this.handleChange = this.handleChange.bind(this)\r\n//     this.handleAdd = this.handleAdd.bind(this)\r\n//   }\r\n\r\n//   handleChange(evt) {\r\n//     this.setState({addText: evt.target.value})\r\n//   }\r\n\r\n//   handleAdd(evt) {\r\n//     evt.preventDefault()\r\n//     this.props.addTodo(this.state.addText)\r\n//     this.setState({addText: ''}) \r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className='todo__add'>\r\n//         <input className='add__input' value={this.state.addText} onChange={this.handleChange}/>\r\n//         <button className='add__button' onClick={this.handleAdd}>\r\n//           Добавить  \r\n//         </button>\r\n//       </form>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n// //ListToDo\r\n// class ListToDo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       // changeMode: ['1'], //строковые id для тех строк, которые находятся в статусе на изменение  \r\n//       // textValue: ''\r\n\r\n//       changeMode: [\r\n//         // {id: '1', textValue: 'asd'}\r\n//       ]\r\n//     }\r\n\r\n//     this.handleDelete = this.handleDelete.bind(this)\r\n//     this.handleChange = this.handleChange.bind(this)\r\n//     this.handleChangeText = this.handleChangeText.bind(this)\r\n\r\n//     this.handleSave = this.handleSave.bind(this)\r\n//   }\r\n\r\n//   handleDelete(evt) {\r\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n//     const delID = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     this.props.delTodo(delID)\r\n//   }\r\n\r\n//   handleChange(evt) { //добавляем моды в ChangeMode\r\n//     const target = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     // console.log(target) //id изменяемого li\r\n//     this.setState( state => {\r\n//       const changeModeClone = Object.assign([], state.changeMode)\r\n//       changeModeClone.push({id: target, textValue: ''})\r\n//       return {changeMode: changeModeClone}\r\n//     })\r\n//   }\r\n\r\n//   handleChangeText(evt) {\r\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n//     const changeID = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     this.setState( state => {\r\n//       const changeModeClone = Object.assign([], state.changeMode)\r\n//       for (let i=0; i<changeModeClone.length; i++) {\r\n//         if (changeModeClone[i].id === changeID) {\r\n//           changeModeClone[i].textValue = evt.target.value\r\n//           break\r\n//         }\r\n//       }\r\n//       return {changeMode: changeModeClone}\r\n//     })\r\n    \r\n//   }\r\n\r\n//   isChangeMode(id) {\r\n//     let isMode = false\r\n//     for (let item of this.state.changeMode) {\r\n//       if (item.id === id) {\r\n//         isMode = true\r\n//       }\r\n//     }\r\n//     return isMode\r\n//   }\r\n\r\n//   changeModePos(id) {\r\n//     let pos\r\n//     for (let i=0; i<this.state.changeMode.length; i++) {\r\n//       if (this.state.changeMode[i].id === id) {\r\n//         pos = i\r\n//       }\r\n//     }\r\n//     return pos\r\n//   }\r\n\r\n//   handleSave(evt) {\r\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n//     const saveID = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     const pos = this.changeModePos(saveID) //позиция в массиве changeMode\r\n\r\n//     this.props.saveToDo(this.state.changeMode[pos])\r\n//     // console.log(this.state.changeMode[pos])\r\n\r\n//     this.setState( state => {\r\n//       const changeModeClone = Object.assign([], state.changeMode)\r\n//       changeModeClone.splice(pos, 1)\r\n//       return {changeMode: changeModeClone}\r\n//     })\r\n\r\n//   }\r\n\r\n//   render() {\r\n\r\n//     // console.log(this.isChangeMode('2'))\r\n\r\n//     const todos = this.props.todos.map( (value, index) => {\r\n//       return <li className='list__item' key={index} data-id={value.id}>\r\n//         { \r\n//           // this.state.changeMode.includes({id: value.id, textValue: ''}) \r\n//           this.isChangeMode(value.id)\r\n//             ? <input className='input__change' value={this.state.changeMode[this.changeModePos(value.id)].textValue} onChange={this.handleChangeText}/> \r\n//             :  `${index + 1}. ${value.text}`\r\n//         }\r\n//         { \r\n//           this.isChangeMode(value.id)\r\n//             ? <button className='btn__save' onClick={this.handleSave}>Сохранить</button> \r\n//             : <button className='btn__change' onClick={this.handleChange}>Изменить</button>\r\n//         }\r\n//         <button className='btn__delete' onClick={this.handleDelete}>Удалить</button>\r\n//       </li>\r\n//     })\r\n\r\n//     return (\r\n//       <ul className='todo__list'>\r\n//         {todos}\r\n//       </ul>\r\n//     )\r\n//   }\r\n// }","C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\components\\todo.js",["28","29","30","31","32","33"],"import React from 'react'\r\n\r\n//ToDo\r\nexport default class ToDo extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        todos: [\r\n          // {id: '1', text: 'Купить хлеб'},\r\n          // {id: '2', text: 'Купить молоко'},\r\n          // {id: '3', text: 'Купить кофе'}\r\n        ],\r\n        isToken: false,\r\n      }\r\n      \r\n      // call fetch as componentWillMount\r\n      this.fetchToDo()\r\n\r\n      this.addTodo = this.addTodo.bind(this)\r\n      this.delTodo = this.delTodo.bind(this)\r\n      this.saveToDo = this.saveToDo.bind(this)\r\n    }\r\n\r\n    // UNSAFE_componentWillMount() {\r\n    //   this.fetchToDo()\r\n    // }\r\n\r\n    async fetchToDo() {\r\n      //console.log(localStorage.getItem('token'))\r\n      const res = await fetch('/api', { \r\n          headers: {\r\n            'Content-Type':'application/json',\r\n            'Authorization': localStorage.getItem('token')\r\n          },\r\n        }\r\n      )\r\n      if (res.ok) {\r\n        //take data\r\n        const result = await res.json()\r\n        this.setState( () => {\r\n          for (let item of result) {\r\n            item.id = item.id.toString()\r\n          }\r\n          return {\r\n            todos: result,\r\n            isToken: true\r\n          }\r\n        })\r\n      } else {\r\n        if (res.status == 401) {\r\n          this.props.changeForm('AuthForm')\r\n        } else {\r\n          console.log(res.statusText)\r\n        }\r\n      }\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //   console.log(\"mount\")\r\n    //   fetch('/api')\r\n    //     .then(response => response.json())\r\n    //     //.then(result => {this.setState({todos: result} ) })\r\n    //     .then(result => {this.setState(state => {\r\n    //       for(let item of result) {\r\n    //         item.id = item.id.toString()\r\n    //       }\r\n    //       return {todos: result}\r\n    //     } ) })    \r\n    // }\r\n\r\n    // componentDidUpdate(prevProps, prevState) {\r\n    //   // if (prevState)\r\n    //   // console.log(prevState)\r\n    //   if (prevState.todos.length && (this.state.todos.length < prevState.todos.length)) {\r\n    //     //console.log(prevState)\r\n  \r\n    //     console.log(\"delete\")\r\n    //   }\r\n    // }\r\n  \r\n    createID() { //генератор id для list-item\r\n      while(true) {\r\n        const id = Math.floor(Math.random() * 1000) // от 1 до 9999\r\n        for (let i=0; i<this.state.todos.length; i++) {\r\n          if (this.state.todos[i].id != id) return id.toString()\r\n        }\r\n      }\r\n    }\r\n    \r\n    async addTodo(newTodoText) {      \r\n      const res = await fetch('/api', { \r\n        method: \"post\",\r\n        headers: {\r\n          'Content-Type':'application/json',\r\n          'Authorization': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({\"name\": newTodoText})\r\n        }\r\n      )\r\n      if (res.ok) {\r\n        //take data\r\n        const result = await res.json()\r\n        this.setState(state => {\r\n          const cloneTodos = Object.assign([], state.todos) //клонирование массива\r\n          if (cloneTodos.length != 0) cloneTodos.unshift({id: result.id.toString(), text: newTodoText})\r\n          else cloneTodos.unshift({id: result.id.toString(), text: newTodoText})\r\n          return {todos: cloneTodos}\r\n        })\r\n      } else {\r\n        if (res.status == 401) {\r\n          this.props.changeForm('AuthForm')\r\n        } else {\r\n          console.log(res.statusText)\r\n        }\r\n      }\r\n    }\r\n  \r\n    async delTodo(delID) {\r\n      const res = await fetch(`/api/delete/${delID}`, {\r\n        method: \"delete\",\r\n        headers: {\r\n          'Content-Type':'application/json',\r\n          'Authorization': localStorage.getItem('token')\r\n        },\r\n      })\r\n\r\n      if (res.ok) {\r\n        //take data\r\n        this.setState( state => {\r\n          const pos = state.todos.findIndex( value => value.id === delID)\r\n          const cloneTodos = Object.assign([], state.todos)\r\n          cloneTodos.splice(pos, 1)\r\n          return {todos: cloneTodos}\r\n        })\r\n      } else {\r\n        if (res.status == 401) {\r\n          this.props.changeForm('AuthForm')\r\n        } else {\r\n          console.log(res.statusText)\r\n        }\r\n      }\r\n    }\r\n\r\n  \r\n    async saveToDo(todo) {\r\n      const res = await fetch('/api/update', {\r\n        method: \"put\",\r\n        headers: {\r\n          'Content-Type':'application/json',\r\n          'Authorization': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify(todo)\r\n      })\r\n\r\n      if (res.ok) {\r\n        //take data\r\n        let pos\r\n          for (let i=0; i<this.state.todos.length; i++) {\r\n            if (this.state.todos[i].id === todo.id) pos = i\r\n          }\r\n  \r\n          this.setState( state => {\r\n            const cloneTodos = Object.assign([], state.todos)\r\n            cloneTodos.splice(pos, 1, {id: todo.id, text: todo.textValue})\r\n            return {todos: cloneTodos}\r\n          })\r\n      } else {\r\n        if (res.status == 401) {\r\n          this.props.changeForm('AuthForm')\r\n        } else {\r\n          console.log(res.statusText)\r\n        }\r\n      }\r\n\r\n    }\r\n  \r\n    render() {\r\n      return this.state.isToken ? <div className='todo'>\r\n        <AddToDo addTodo={this.addTodo}/>  \r\n        <ListToDo todos={this.state.todos} delTodo={this.delTodo} saveToDo={this.saveToDo}/> \r\n      </div>  : null        \r\n    }\r\n}\r\n  \r\n  \r\n//AddToDo\r\nclass AddToDo extends React.Component {\r\n    constructor() {\r\n      super()\r\n      this.state = {\r\n        addText: ''\r\n      }\r\n  \r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.handleAdd = this.handleAdd.bind(this)\r\n    }\r\n  \r\n    handleChange(evt) {\r\n      this.setState({addText: evt.target.value})\r\n    }\r\n  \r\n    handleAdd(evt) {\r\n      evt.preventDefault()\r\n      this.props.addTodo(this.state.addText)\r\n      this.setState({addText: ''}) \r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className='todo__add'>\r\n          <input className='add__input' value={this.state.addText} onChange={this.handleChange}/>\r\n          <button className='add__button' onClick={this.handleAdd}>\r\n            Добавить  \r\n          </button>\r\n        </form>\r\n      )\r\n    }\r\n}\r\n  \r\n  \r\n//ListToDo\r\nclass ListToDo extends React.Component {\r\n    constructor() {\r\n      super()\r\n      this.state = {\r\n        // changeMode: ['1'], //строковые id для тех строк, которые находятся в статусе на изменение  \r\n        // textValue: ''\r\n  \r\n        changeMode: [\r\n          // {id: '1', textValue: 'asd'}\r\n        ]\r\n      }\r\n  \r\n      this.handleDelete = this.handleDelete.bind(this)\r\n      this.handleChange = this.handleChange.bind(this)\r\n      this.handleChangeText = this.handleChangeText.bind(this)\r\n  \r\n      this.handleSave = this.handleSave.bind(this)\r\n    }\r\n  \r\n    handleDelete(evt) {\r\n      // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n      const delID = evt.target.closest('.list__item').getAttribute('data-id')\r\n      this.props.delTodo(delID)\r\n    }\r\n  \r\n    handleChange(evt) { //добавляем моды в ChangeMode\r\n      const target = evt.target.closest('.list__item').getAttribute('data-id')\r\n      // console.log(target) //id изменяемого li\r\n      this.setState( state => {\r\n        const changeModeClone = Object.assign([], state.changeMode)\r\n        changeModeClone.push({id: target, textValue: ''})\r\n        return {changeMode: changeModeClone}\r\n      })\r\n    }\r\n  \r\n    handleChangeText(evt) {\r\n      // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n      const changeID = evt.target.closest('.list__item').getAttribute('data-id')\r\n      this.setState( state => {\r\n        const changeModeClone = Object.assign([], state.changeMode)\r\n        for (let i=0; i<changeModeClone.length; i++) {\r\n          if (changeModeClone[i].id === changeID) {\r\n            changeModeClone[i].textValue = evt.target.value\r\n            break\r\n          }\r\n        }\r\n        return {changeMode: changeModeClone}\r\n      })\r\n      \r\n    }\r\n  \r\n    isChangeMode(id) {\r\n      let isMode = false\r\n      for (let item of this.state.changeMode) {\r\n        if (item.id === id) {\r\n          isMode = true\r\n        }\r\n      }\r\n      return isMode\r\n    }\r\n  \r\n    changeModePos(id) {\r\n      let pos\r\n      for (let i=0; i<this.state.changeMode.length; i++) {\r\n        if (this.state.changeMode[i].id === id) {\r\n          pos = i\r\n        }\r\n      }\r\n      return pos\r\n    }\r\n  \r\n    handleSave(evt) {\r\n      // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n      const saveID = evt.target.closest('.list__item').getAttribute('data-id')\r\n      const pos = this.changeModePos(saveID) //позиция в массиве changeMode\r\n  \r\n      this.props.saveToDo(this.state.changeMode[pos])\r\n      // console.log(this.state.changeMode[pos])\r\n  \r\n      this.setState( state => {\r\n        const changeModeClone = Object.assign([], state.changeMode)\r\n        changeModeClone.splice(pos, 1)\r\n        return {changeMode: changeModeClone}\r\n      })\r\n  \r\n    }\r\n  \r\n    render() {\r\n  \r\n      // console.log(this.isChangeMode('2'))\r\n        \r\n      const todos = this.props.todos.map( (value, index) => {\r\n        return <li className='list__item' key={index} data-id={value.id}>\r\n          { \r\n            // this.state.changeMode.includes({id: value.id, textValue: ''}) \r\n            this.isChangeMode(value.id)\r\n              ? <input className='input__change' value={this.state.changeMode[this.changeModePos(value.id)].textValue} onChange={this.handleChangeText}/> \r\n              :  `${index + 1}. ${value.text}`\r\n          }\r\n          { \r\n            this.isChangeMode(value.id)\r\n              ? <button className='btn__save' onClick={this.handleSave}>Сохранить</button> \r\n              : <button className='btn__change' onClick={this.handleChange}>Изменить</button>\r\n          }\r\n          <button className='btn__delete' onClick={this.handleDelete}>Удалить</button>\r\n        </li>\r\n      })\r\n  \r\n      return (\r\n        <ul className='todo__list'>\r\n          {todos}\r\n        </ul>\r\n      )\r\n    }\r\n}","C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\components\\authForm.js",[],"C:\\Users\\korek\\Desktop\\project\\fullstack-todo\\client\\src\\components\\regForm.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":25,"column":5,"nodeType":"40","messageId":"41","endLine":31,"endColumn":6},{"ruleId":"42","severity":1,"message":"43","line":50,"column":24,"nodeType":"44","messageId":"45","endLine":50,"endColumn":26},{"ruleId":"42","severity":1,"message":"46","line":85,"column":38,"nodeType":"44","messageId":"45","endLine":85,"endColumn":40},{"ruleId":"42","severity":1,"message":"46","line":105,"column":33,"nodeType":"44","messageId":"45","endLine":105,"endColumn":35},{"ruleId":"42","severity":1,"message":"43","line":110,"column":24,"nodeType":"44","messageId":"45","endLine":110,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":136,"column":24,"nodeType":"44","messageId":"45","endLine":136,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":168,"column":24,"nodeType":"44","messageId":"45","endLine":168,"endColumn":26},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]