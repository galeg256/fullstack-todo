{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User_ya\\\\Desktop\\\\repos\\\\fullstack-todo\\\\client\\\\src\\\\App.js\";\nimport React from 'react';\nimport ToDo from './components/todo.js';\nimport AuthForm from './components/authForm.js';\nimport RegisterForm from './components/regForm.js'; //App\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLogged: false,\n      //AuthForm - стартовая форма\n      formType: 'AuthForm',\n      //отвечает за отображаемую форму\n      // formType: 'RegisterForm'\n      formType\n    };\n    this.changeForm = this.changeForm.bind(this);\n  }\n\n  changeForm(type) {\n    this.setState({\n      formType: type\n    });\n  }\n\n  selectForm() {\n    switch (this.state.formType) {\n      case 'AuthForm':\n        return /*#__PURE__*/_jsxDEV(AuthForm, {\n          changeForm: this.changeForm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 31\n        }, this);\n\n      case 'RegisterForm':\n        return /*#__PURE__*/_jsxDEV(RegisterForm, {\n          changeForm: this.changeForm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 35\n        }, this);\n      //ToDo не имеет право выбора формы, но позднее необходимо будет это реализовать, \n      //т.к. пользователь должен иметь возможность смены аккаунта из рабочей области\n\n      case 'ToDo':\n        return /*#__PURE__*/_jsxDEV(ToDo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 27\n        }, this);\n    }\n  }\n\n  render() {\n    // console.log(localStorage.getItem('token'))\n    // const state = this.state\n    // const form = state.isLogged ? <ToDo />\n    //   : state.isReg ? <RegisterForm />\n    //   : <AuthForm />\n    const token = localStorage.getItem('token');\n    if (!token) this.setState('');\n    const form = this.selectForm();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: form\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n\n} // class AuthForm extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       logValue: '',\n//       pasValue: ''\n//     }\n//     this.handleLogInput = this.handleLogInput.bind(this)\n//     this.handlePasInput = this.handlePasInput.bind(this)\n//   }\n//   handleLogInput(evt) {\n//     this.setState({logValue: evt.target.value})\n//   }\n//   handlePasInput(evt) {\n//     this.setState({pasValue: evt.target.value})\n//   }\n//   render() {\n//     const state = this.state\n//     return (\n//       <div className='auth-form'>\n//         <div className='auth-form__wrap'>\n//           <h1 className='auth-form__title'>Вход</h1>\n//           <form className='auth-form__form'>\n//             <div className='form__login'>\n//               <span>E-mail:</span>\n//               <input className='login__input' type='email' value={state.logValue} onChange={this.handleLogInput}/>\n//             </div>\n//             <div className='form__password'>\n//               <span>Пароль:</span>\n//               <input className='password__input' type='password' value={state.pasValue} onChange={this.handlePasInput}/>\n//             </div>\n//           </form>\n//           <div className='auth-form__buttons'>\n//             <button className='btn-reg'>Зарегистрироваться</button>\n//             <button className='btn-enter'>Войти</button>\n//           </div>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n// class RegisterForm extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       logValue: '',\n//       pasValue: '',\n//       repPasValue: ''\n//     }\n//     this.handleLogInput = this.handleLogInput.bind(this)\n//     this.handlePasInput = this.handlePasInput.bind(this)\n//     this.handleRepPasInput = this.handleRepPasInput.bind(this)\n//   }\n//   handleLogInput(evt) {\n//     this.setState({logValue: evt.target.value})\n//   }\n//   handlePasInput(evt) {\n//     this.setState({pasValue: evt.target.value})\n//   }\n//   handleRepPasInput(evt) {\n//     this.setState({repPasValue: evt.target.value})\n//   }\n//   render() {\n//     const state = this.state\n//     return (\n//       <div className='reg-form'>\n//         <div className='reg-form__wrap'>\n//           <h1 className='reg-form__title'>Регистрация</h1>\n//           <form className='reg-form__form'>\n//             <div className='form__login'>\n//               <span>E-mail:</span>\n//               <input className='login__input' type='email' value={state.logValue} onChange={this.handleLogInput}/>\n//             </div>\n//             <div className='form__password'>\n//               <span>Пароль:</span>\n//               <input className='password__input' type='password' value={state.pasValue} onChange={this.handlePasInput}/>\n//             </div>\n//             <div className='form__password repeat-password'>\n//               <span>Повторите пароль:</span>\n//               <input className='password__input' type='password' value={state.repPasValue} onChange={this.handleRepPasInput}/>\n//             </div>\n//           </form>\n//           <div className='reg-form__buttons'>\n//             <button className='btn-enter'>Войти</button>\n//             <button className='btn-reg'>Зарегистрироваться</button>\n//           </div>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n////////////////////////////////////////////////////////////////\n//Код написанный ниже импортируется из /components/todo/component.js\n////////////////////////////////////////////////////////////////\n// //ToDo\n// class ToDo extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       todos: [\n//         {id: '1', text: 'Купить хлеб'},\n//         {id: '2', text: 'Купить молоко'},\n//         {id: '3', text: 'Купить кофе'}\n//       ]\n//     }\n//     this.addTodo = this.addTodo.bind(this)\n//     this.delTodo = this.delTodo.bind(this)\n//     this.saveToDo = this.saveToDo.bind(this)\n//   }\n//   componentDidMount() {\n//     console.log(\"mount\")\n//     fetch('http://localhost:5000/api')\n//       .then(response => response.json())\n//       //.then(result => {this.setState({todos: result} ) })\n//       .then(result => {this.setState(state => {\n//         for(let item of result) {\n//           item.id = item.id.toString()\n//         }\n//         return {todos: result}\n//       } ) })\n//   }\n//   // componentDidUpdate(prevProps, prevState) {\n//   //   // if (prevState)\n//   //   // console.log(prevState)\n//   //   if (prevState.todos.length && (this.state.todos.length < prevState.todos.length)) {\n//   //     //console.log(prevState)\n//   //     console.log(\"delete\")\n//   //   }\n//   // }\n//   createID() { //генератор id для list-item\n//     while(true) {\n//       const id = Math.floor(Math.random() * 1000) // от 1 до 9999\n//       for (let i=0; i<this.state.todos.length; i++) {\n//         if (this.state.todos[i].id != id) return id.toString()\n//       }\n//     }\n//   }\n//   addTodo(newTodoText) {\n//     // this.state.todos.unshift({id: '1', text: newTodoText})\n//     // console.log(this.state.todos)\n//     // this.setState({todos: this.state.todos})\n//     console.log({\"name\": newTodoText})\n//     fetch('http://localhost:5000/api/', {\n//       method: \"post\",\n//       headers: {'Content-Type':'application/json'},\n//       body: JSON.stringify({\"name\": newTodoText})\n//     })\n//     .then(res => res.json())\n//     .then(result => {\n//       this.setState(state => {\n//         const cloneTodos = Object.assign([], state.todos) //клонирование массива\n//         if (cloneTodos.length != 0) cloneTodos.unshift({id: result[0].id.toString(), text: newTodoText})\n//         else cloneTodos.unshift({id: result[0].id.toString(), text: newTodoText})\n//         return {todos: cloneTodos}\n//       })\n//     })\n//   }\n//   delTodo(delID) {\n//     fetch(`http://localhost:5000/api/delete/${delID}`, {\n//       method: \"delete\"\n//     })\n//     //.then(response => response.json())\n//     .then(result => {\n//       console.log(result)\n//       if (result.status==200) {\n//         this.setState( state => {\n//         const pos = state.todos.findIndex( value => value.id === delID)\n//         const cloneTodos = Object.assign([], state.todos)\n//         cloneTodos.splice(pos, 1)\n//         return {todos: cloneTodos}\n//         })\n//       } else console.log(\"error delete\")\n//     })\n//   }\n//   saveToDo(todo) {\n//     console.log(todo)\n//     fetch('http://localhost:5000/api/update', {\n//       method: \"put\",\n//       headers: {'Content-Type':'application/json'},\n//       body: JSON.stringify(todo)\n//     })\n//     //.then(res => res.json())\n//     .then(result => {    \n//       if (result.status == 200) {\n//         let pos\n//         for (let i=0; i<this.state.todos.length; i++) {\n//           if (this.state.todos[i].id === todo.id) pos = i\n//         }\n//         this.setState( state => {\n//           const cloneTodos = Object.assign([], state.todos)\n//           cloneTodos.splice(pos, 1, {id: todo.id, text: todo.textValue})\n//           return {todos: cloneTodos}\n//         })\n//       }\n//     })\n//   }\n//   render() {\n//     return (\n//       <div className='todo'>\n//         <AddToDo addTodo={this.addTodo}/>  \n//         <ListToDo todos={this.state.todos} delTodo={this.delTodo} saveToDo={this.saveToDo}/>\n//       </div>\n//     )\n//   }\n// }\n// //AddToDo\n// class AddToDo extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       addText: ''\n//     }\n//     this.handleChange = this.handleChange.bind(this)\n//     this.handleAdd = this.handleAdd.bind(this)\n//   }\n//   handleChange(evt) {\n//     this.setState({addText: evt.target.value})\n//   }\n//   handleAdd(evt) {\n//     evt.preventDefault()\n//     this.props.addTodo(this.state.addText)\n//     this.setState({addText: ''}) \n//   }\n//   render() {\n//     return (\n//       <form className='todo__add'>\n//         <input className='add__input' value={this.state.addText} onChange={this.handleChange}/>\n//         <button className='add__button' onClick={this.handleAdd}>\n//           Добавить  \n//         </button>\n//       </form>\n//     )\n//   }\n// }\n// //ListToDo\n// class ListToDo extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       // changeMode: ['1'], //строковые id для тех строк, которые находятся в статусе на изменение  \n//       // textValue: ''\n//       changeMode: [\n//         // {id: '1', textValue: 'asd'}\n//       ]\n//     }\n//     this.handleDelete = this.handleDelete.bind(this)\n//     this.handleChange = this.handleChange.bind(this)\n//     this.handleChangeText = this.handleChangeText.bind(this)\n//     this.handleSave = this.handleSave.bind(this)\n//   }\n//   handleDelete(evt) {\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\n//     const delID = evt.target.closest('.list__item').getAttribute('data-id')\n//     this.props.delTodo(delID)\n//   }\n//   handleChange(evt) { //добавляем моды в ChangeMode\n//     const target = evt.target.closest('.list__item').getAttribute('data-id')\n//     // console.log(target) //id изменяемого li\n//     this.setState( state => {\n//       const changeModeClone = Object.assign([], state.changeMode)\n//       changeModeClone.push({id: target, textValue: ''})\n//       return {changeMode: changeModeClone}\n//     })\n//   }\n//   handleChangeText(evt) {\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\n//     const changeID = evt.target.closest('.list__item').getAttribute('data-id')\n//     this.setState( state => {\n//       const changeModeClone = Object.assign([], state.changeMode)\n//       for (let i=0; i<changeModeClone.length; i++) {\n//         if (changeModeClone[i].id === changeID) {\n//           changeModeClone[i].textValue = evt.target.value\n//           break\n//         }\n//       }\n//       return {changeMode: changeModeClone}\n//     })\n//   }\n//   isChangeMode(id) {\n//     let isMode = false\n//     for (let item of this.state.changeMode) {\n//       if (item.id === id) {\n//         isMode = true\n//       }\n//     }\n//     return isMode\n//   }\n//   changeModePos(id) {\n//     let pos\n//     for (let i=0; i<this.state.changeMode.length; i++) {\n//       if (this.state.changeMode[i].id === id) {\n//         pos = i\n//       }\n//     }\n//     return pos\n//   }\n//   handleSave(evt) {\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\n//     const saveID = evt.target.closest('.list__item').getAttribute('data-id')\n//     const pos = this.changeModePos(saveID) //позиция в массиве changeMode\n//     this.props.saveToDo(this.state.changeMode[pos])\n//     // console.log(this.state.changeMode[pos])\n//     this.setState( state => {\n//       const changeModeClone = Object.assign([], state.changeMode)\n//       changeModeClone.splice(pos, 1)\n//       return {changeMode: changeModeClone}\n//     })\n//   }\n//   render() {\n//     // console.log(this.isChangeMode('2'))\n//     const todos = this.props.todos.map( (value, index) => {\n//       return <li className='list__item' key={index} data-id={value.id}>\n//         { \n//           // this.state.changeMode.includes({id: value.id, textValue: ''}) \n//           this.isChangeMode(value.id)\n//             ? <input className='input__change' value={this.state.changeMode[this.changeModePos(value.id)].textValue} onChange={this.handleChangeText}/> \n//             :  `${index + 1}. ${value.text}`\n//         }\n//         { \n//           this.isChangeMode(value.id)\n//             ? <button className='btn__save' onClick={this.handleSave}>Сохранить</button> \n//             : <button className='btn__change' onClick={this.handleChange}>Изменить</button>\n//         }\n//         <button className='btn__delete' onClick={this.handleDelete}>Удалить</button>\n//       </li>\n//     })\n//     return (\n//       <ul className='todo__list'>\n//         {todos}\n//       </ul>\n//     )\n//   }\n// }","map":{"version":3,"sources":["C:/Users/User_ya/Desktop/repos/fullstack-todo/client/src/App.js"],"names":["React","ToDo","AuthForm","RegisterForm","App","Component","constructor","state","isLogged","formType","changeForm","bind","type","setState","selectForm","render","token","localStorage","getItem","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB,C,CACA;;;AACA,eAAe,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAC/CC,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEX;AACAC,MAAAA,QAAQ,EAAE,UAHC;AAGW;AACtB;AACAA,MAAAA;AALW,KAAb;AAQA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDD,EAAAA,UAAU,CAACE,IAAD,EAAO;AACf,SAAKC,QAAL,CAAc;AAACJ,MAAAA,QAAQ,EAAEG;AAAX,KAAd;AACD;;AAEDE,EAAAA,UAAU,GAAG;AACX,YAAO,KAAKP,KAAL,CAAWE,QAAlB;AACE,WAAK,UAAL;AAAiB,4BAAO,QAAC,QAAD;AAAU,UAAA,UAAU,EAAE,KAAKC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACjB,WAAK,cAAL;AAAqB,4BAAO,QAAC,YAAD;AAAc,UAAA,UAAU,EAAE,KAAKA;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAAP;AACrB;AACA;;AACA,WAAK,MAAL;AAAa,4BAAO,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;AALf;AAOD;;AAEDK,EAAAA,MAAM,GAAG;AACP;AAEA;AACA;AACA;AACA;AAEA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAI,CAACF,KAAL,EAAY,KAAKH,QAAL,CAAc,EAAd;AACZ,UAAMM,IAAI,GAAG,KAAKL,UAAL,EAAb;AAEA,wBAAO;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAIJK;AAJI;AAAA;AAAA;AAAA;AAAA,YAAP;AAMD;;AA9C8C,C,CAgFjsourcesContent":["import React from 'react'\r\nimport ToDo from './components/todo.js'\r\nimport AuthForm from './components/authForm.js'\r\nimport RegisterForm from './components/regForm.js' \r\n//App\r\nexport default class App extends React.Component {\r\n  constructor () {\r\n    super() \r\n    this.state = {\r\n      isLogged: false,\r\n      //AuthForm - стартовая форма\r\n      formType: 'AuthForm', //отвечает за отображаемую форму\r\n      // formType: 'RegisterForm'\r\n      formType\r\n    }\r\n\r\n    this.changeForm = this.changeForm.bind(this)\r\n  }\r\n\r\n  changeForm(type) {\r\n    this.setState({formType: type})\r\n  }\r\n\r\n  selectForm() {\r\n    switch(this.state.formType) {\r\n      case 'AuthForm': return <AuthForm changeForm={this.changeForm}/>\r\n      case 'RegisterForm': return <RegisterForm changeForm={this.changeForm}/>\r\n      //ToDo не имеет право выбора формы, но позднее необходимо будет это реализовать, \r\n      //т.к. пользователь должен иметь возможность смены аккаунта из рабочей области\r\n      case 'ToDo': return <ToDo /> \r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(localStorage.getItem('token'))\r\n\r\n    // const state = this.state\r\n    // const form = state.isLogged ? <ToDo />\r\n    //   : state.isReg ? <RegisterForm />\r\n    //   : <AuthForm />\r\n\r\n    const token = localStorage.getItem('token')\r\n    if (!token) this.setState('') \r\n    const form = this.selectForm()\r\n\r\n    return <div className='wrapper'>\r\n      {/* <AuthForm /> */}\r\n      {/* <RegisterForm /> */}\r\n      {/* <ToDo /> */}\r\n      {form}\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class AuthForm extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       logValue: '',\r\n//       pasValue: ''\r\n//     }\r\n\r\n//     this.handleLogInput = this.handleLogInput.bind(this)\r\n//     this.handlePasInput = this.handlePasInput.bind(this)\r\n//   }\r\n\r\n//   handleLogInput(evt) {\r\n//     this.setState({logValue: evt.target.value})\r\n//   }\r\n\r\n//   handlePasInput(evt) {\r\n//     this.setState({pasValue: evt.target.value})\r\n//   }\r\n\r\n//   render() {\r\n//     const state = this.state\r\n\r\n//     return (\r\n//       <div className='auth-form'>\r\n//         <div className='auth-form__wrap'>\r\n//           <h1 className='auth-form__title'>Вход</h1>\r\n//           <form className='auth-form__form'>\r\n//             <div className='form__login'>\r\n//               <span>E-mail:</span>\r\n//               <input className='login__input' type='email' value={state.logValue} onChange={this.handleLogInput}/>\r\n//             </div>\r\n//             <div className='form__password'>\r\n//               <span>Пароль:</span>\r\n//               <input className='password__input' type='password' value={state.pasValue} onChange={this.handlePasInput}/>\r\n//             </div>\r\n//           </form>\r\n//           <div className='auth-form__buttons'>\r\n//             <button className='btn-reg'>Зарегистрироваться</button>\r\n//             <button className='btn-enter'>Войти</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// class RegisterForm extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       logValue: '',\r\n//       pasValue: '',\r\n//       repPasValue: ''\r\n//     }\r\n\r\n//     this.handleLogInput = this.handleLogInput.bind(this)\r\n//     this.handlePasInput = this.handlePasInput.bind(this)\r\n//     this.handleRepPasInput = this.handleRepPasInput.bind(this)\r\n//   }\r\n\r\n//   handleLogInput(evt) {\r\n//     this.setState({logValue: evt.target.value})\r\n//   }\r\n\r\n//   handlePasInput(evt) {\r\n//     this.setState({pasValue: evt.target.value})\r\n//   }\r\n\r\n//   handleRepPasInput(evt) {\r\n//     this.setState({repPasValue: evt.target.value})\r\n//   }\r\n\r\n//   render() {\r\n//     const state = this.state\r\n\r\n//     return (\r\n//       <div className='reg-form'>\r\n//         <div className='reg-form__wrap'>\r\n//           <h1 className='reg-form__title'>Регистрация</h1>\r\n//           <form className='reg-form__form'>\r\n//             <div className='form__login'>\r\n//               <span>E-mail:</span>\r\n//               <input className='login__input' type='email' value={state.logValue} onChange={this.handleLogInput}/>\r\n//             </div>\r\n//             <div className='form__password'>\r\n//               <span>Пароль:</span>\r\n//               <input className='password__input' type='password' value={state.pasValue} onChange={this.handlePasInput}/>\r\n//             </div>\r\n//             <div className='form__password repeat-password'>\r\n//               <span>Повторите пароль:</span>\r\n//               <input className='password__input' type='password' value={state.repPasValue} onChange={this.handleRepPasInput}/>\r\n//             </div>\r\n//           </form>\r\n//           <div className='reg-form__buttons'>\r\n//             <button className='btn-enter'>Войти</button>\r\n//             <button className='btn-reg'>Зарегистрироваться</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n//Код написанный ниже импортируется из /components/todo/component.js\r\n////////////////////////////////////////////////////////////////\r\n// //ToDo\r\n// class ToDo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       todos: [\r\n//         {id: '1', text: 'Купить хлеб'},\r\n//         {id: '2', text: 'Купить молоко'},\r\n//         {id: '3', text: 'Купить кофе'}\r\n//       ]\r\n//     }\r\n\r\n//     this.addTodo = this.addTodo.bind(this)\r\n//     this.delTodo = this.delTodo.bind(this)\r\n//     this.saveToDo = this.saveToDo.bind(this)\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     console.log(\"mount\")\r\n//     fetch('http://localhost:5000/api')\r\n//       .then(response => response.json())\r\n//       //.then(result => {this.setState({todos: result} ) })\r\n//       .then(result => {this.setState(state => {\r\n//         for(let item of result) {\r\n//           item.id = item.id.toString()\r\n//         }\r\n//         return {todos: result}\r\n//       } ) })\r\n      \r\n//   }\r\n//   // componentDidUpdate(prevProps, prevState) {\r\n//   //   // if (prevState)\r\n//   //   // console.log(prevState)\r\n//   //   if (prevState.todos.length && (this.state.todos.length < prevState.todos.length)) {\r\n//   //     //console.log(prevState)\r\n\r\n//   //     console.log(\"delete\")\r\n//   //   }\r\n//   // }\r\n\r\n//   createID() { //генератор id для list-item\r\n//     while(true) {\r\n//       const id = Math.floor(Math.random() * 1000) // от 1 до 9999\r\n//       for (let i=0; i<this.state.todos.length; i++) {\r\n//         if (this.state.todos[i].id != id) return id.toString()\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   addTodo(newTodoText) {\r\n//     // this.state.todos.unshift({id: '1', text: newTodoText})\r\n//     // console.log(this.state.todos)\r\n//     // this.setState({todos: this.state.todos})\r\n//     console.log({\"name\": newTodoText})\r\n    \r\n//     fetch('http://localhost:5000/api/', {\r\n//       method: \"post\",\r\n//       headers: {'Content-Type':'application/json'},\r\n//       body: JSON.stringify({\"name\": newTodoText})\r\n//     })\r\n//     .then(res => res.json())\r\n//     .then(result => {\r\n//       this.setState(state => {\r\n//         const cloneTodos = Object.assign([], state.todos) //клонирование массива\r\n//         if (cloneTodos.length != 0) cloneTodos.unshift({id: result[0].id.toString(), text: newTodoText})\r\n//         else cloneTodos.unshift({id: result[0].id.toString(), text: newTodoText})\r\n//         return {todos: cloneTodos}\r\n//       })\r\n//     })\r\n//   }\r\n\r\n//   delTodo(delID) {\r\n//     fetch(`http://localhost:5000/api/delete/${delID}`, {\r\n//       method: \"delete\"\r\n//     })\r\n//     //.then(response => response.json())\r\n//     .then(result => {\r\n//       console.log(result)\r\n//       if (result.status==200) {\r\n//         this.setState( state => {\r\n//         const pos = state.todos.findIndex( value => value.id === delID)\r\n//         const cloneTodos = Object.assign([], state.todos)\r\n//         cloneTodos.splice(pos, 1)\r\n//         return {todos: cloneTodos}\r\n//         })\r\n//       } else console.log(\"error delete\")\r\n//     })\r\n//   }\r\n\r\n//   saveToDo(todo) {\r\n//     console.log(todo)\r\n//     fetch('http://localhost:5000/api/update', {\r\n//       method: \"put\",\r\n//       headers: {'Content-Type':'application/json'},\r\n//       body: JSON.stringify(todo)\r\n//     })\r\n//     //.then(res => res.json())\r\n//     .then(result => {    \r\n//       if (result.status == 200) {\r\n//         let pos\r\n//         for (let i=0; i<this.state.todos.length; i++) {\r\n//           if (this.state.todos[i].id === todo.id) pos = i\r\n//         }\r\n\r\n//         this.setState( state => {\r\n//           const cloneTodos = Object.assign([], state.todos)\r\n//           cloneTodos.splice(pos, 1, {id: todo.id, text: todo.textValue})\r\n//           return {todos: cloneTodos}\r\n//         })\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className='todo'>\r\n//         <AddToDo addTodo={this.addTodo}/>  \r\n//         <ListToDo todos={this.state.todos} delTodo={this.delTodo} saveToDo={this.saveToDo}/>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n// //AddToDo\r\n// class AddToDo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       addText: ''\r\n//     }\r\n\r\n//     this.handleChange = this.handleChange.bind(this)\r\n//     this.handleAdd = this.handleAdd.bind(this)\r\n//   }\r\n\r\n//   handleChange(evt) {\r\n//     this.setState({addText: evt.target.value})\r\n//   }\r\n\r\n//   handleAdd(evt) {\r\n//     evt.preventDefault()\r\n//     this.props.addTodo(this.state.addText)\r\n//     this.setState({addText: ''}) \r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className='todo__add'>\r\n//         <input className='add__input' value={this.state.addText} onChange={this.handleChange}/>\r\n//         <button className='add__button' onClick={this.handleAdd}>\r\n//           Добавить  \r\n//         </button>\r\n//       </form>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n// //ListToDo\r\n// class ListToDo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       // changeMode: ['1'], //строковые id для тех строк, которые находятся в статусе на изменение  \r\n//       // textValue: ''\r\n\r\n//       changeMode: [\r\n//         // {id: '1', textValue: 'asd'}\r\n//       ]\r\n//     }\r\n\r\n//     this.handleDelete = this.handleDelete.bind(this)\r\n//     this.handleChange = this.handleChange.bind(this)\r\n//     this.handleChangeText = this.handleChangeText.bind(this)\r\n\r\n//     this.handleSave = this.handleSave.bind(this)\r\n//   }\r\n\r\n//   handleDelete(evt) {\r\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n//     const delID = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     this.props.delTodo(delID)\r\n//   }\r\n\r\n//   handleChange(evt) { //добавляем моды в ChangeMode\r\n//     const target = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     // console.log(target) //id изменяемого li\r\n//     this.setState( state => {\r\n//       const changeModeClone = Object.assign([], state.changeMode)\r\n//       changeModeClone.push({id: target, textValue: ''})\r\n//       return {changeMode: changeModeClone}\r\n//     })\r\n//   }\r\n\r\n//   handleChangeText(evt) {\r\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n//     const changeID = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     this.setState( state => {\r\n//       const changeModeClone = Object.assign([], state.changeMode)\r\n//       for (let i=0; i<changeModeClone.length; i++) {\r\n//         if (changeModeClone[i].id === changeID) {\r\n//           changeModeClone[i].textValue = evt.target.value\r\n//           break\r\n//         }\r\n//       }\r\n//       return {changeMode: changeModeClone}\r\n//     })\r\n    \r\n//   }\r\n\r\n//   isChangeMode(id) {\r\n//     let isMode = false\r\n//     for (let item of this.state.changeMode) {\r\n//       if (item.id === id) {\r\n//         isMode = true\r\n//       }\r\n//     }\r\n//     return isMode\r\n//   }\r\n\r\n//   changeModePos(id) {\r\n//     let pos\r\n//     for (let i=0; i<this.state.changeMode.length; i++) {\r\n//       if (this.state.changeMode[i].id === id) {\r\n//         pos = i\r\n//       }\r\n//     }\r\n//     return pos\r\n//   }\r\n\r\n//   handleSave(evt) {\r\n//     // console.log(evt.target.closest('.list__item').getAttribute('data-id'))\r\n//     const saveID = evt.target.closest('.list__item').getAttribute('data-id')\r\n//     const pos = this.changeModePos(saveID) //позиция в массиве changeMode\r\n\r\n//     this.props.saveToDo(this.state.changeMode[pos])\r\n//     // console.log(this.state.changeMode[pos])\r\n\r\n//     this.setState( state => {\r\n//       const changeModeClone = Object.assign([], state.changeMode)\r\n//       changeModeClone.splice(pos, 1)\r\n//       return {changeMode: changeModeClone}\r\n//     })\r\n\r\n//   }\r\n\r\n//   render() {\r\n\r\n//     // console.log(this.isChangeMode('2'))\r\n\r\n//     const todos = this.props.todos.map( (value, index) => {\r\n//       return <li className='list__item' key={index} data-id={value.id}>\r\n//         { \r\n//           // this.state.changeMode.includes({id: value.id, textValue: ''}) \r\n//           this.isChangeMode(value.id)\r\n//             ? <input className='input__change' value={this.state.changeMode[this.changeModePos(value.id)].textValue} onChange={this.handleChangeText}/> \r\n//             :  `${index + 1}. ${value.text}`\r\n//         }\r\n//         { \r\n//           this.isChangeMode(value.id)\r\n//             ? <button className='btn__save' onClick={this.handleSave}>Сохранить</button> \r\n//             : <button className='btn__change' onClick={this.handleChange}>Изменить</button>\r\n//         }\r\n//         <button className='btn__delete' onClick={this.handleDelete}>Удалить</button>\r\n//       </li>\r\n//     })\r\n\r\n//     return (\r\n//       <ul className='todo__list'>\r\n//         {todos}\r\n//       </ul>\r\n//     )\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}